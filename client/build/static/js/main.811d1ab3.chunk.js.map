{"version":3,"sources":["queries/queries.js","components/CarDetails.js","components/CarList.js","hooks/handleFormHook.js","components/AddCar.js","App.js","serviceWorker.js","index.js"],"names":["getCarsQuery","gql","getOwnersQuery","AddCarMutation","getCarQuery","CarDetails","carId","useQuery","variables","_id","loading","error","data","id","car","name","model","company","owner","cars","map","item","key","getCarDetails","CarList","React","useState","Id","setCar","onClick","e","HandleFormHook","callback","inputs","setInputs","handleSubmit","event","preventDefault","handleInputChange","persist","target","value","AddCar","props","owners","useMutation","addCar","carName","parseInt","ownerId","refetchQueries","query","onSubmit","className","type","onChange","disabled","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.811d1ab3.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\n\nconst getCarsQuery = gql`\n  {\n    cars {\n      name\n      _id\n    }\n  }\n`;\n\nconst getOwnersQuery = gql`\n  {\n    owners {\n      name\n      _id\n    }\n  }\n`;\n\nconst AddCarMutation = gql`\n  mutation($name: String!, $model: Int!, $company: String!, $ownerId: ID!) {\n    addCar(name: $name, model: $model, company: $company, ownerId: $ownerId) {\n      name\n      _id\n    }\n  }\n`;\n\nconst getCarQuery = gql`\n  query($_id: ID!) {\n    car(_id: $_id) {\n      _id\n      name\n      model\n      company\n      owner {\n        _id\n        name\n        age\n        cars {\n          name\n          company\n          _id\n        }\n      }\n    }\n  }\n`;\n\nexport { getCarsQuery, getOwnersQuery, AddCarMutation, getCarQuery };\n","import React from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { getCarQuery } from \"./../queries/queries\";\n\nconst CarDetails = ({ carId }) => {\n  const { loading, error, data } = useQuery(getCarQuery, {\n    variables: { _id: carId },\n  });\n\n  const getCarDetails = () => {\n      if (loading) return <p>Loading car details...</p>;\n      if (error) return <p>Error :(</p>;\n    const { car } = data;\n    if (car) {\n      return (\n        <div>\n          <h2>{car.name}</h2>\n          <p>model : {car.model}</p>\n          <p>company : {car.company}</p>\n          <p>owner : {car.owner.name}</p>\n          <p>All cars by this owner :</p>\n          <ul>\n            {car.owner.cars.map(item => {\n              return <li key={item._id}>{item.name}</li>;\n            })}\n          </ul>\n        </div>\n      );\n    } else {\n      return <div>No Car Selected</div>;\n    }\n  };\n\n  return <div id=\"carDetails\">{getCarDetails()}</div>;\n};\n\nexport default CarDetails;\n","import React from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { getCarsQuery } from \"./../queries/queries\";\nimport CarDetails from \"./CarDetails\";\n\nconst CarList = () => {\n  const [Id, setCar] = React.useState(0);\n\n  const { loading, error, data } = useQuery(getCarsQuery);\n\n  const displayCars = () => {\n    if (loading) return <div>Loading Cars...</div>;\n    if (error) return <p>Error :(</p>;\n    return data.cars.map(car => {\n        return (\n            <li key={car._id} onClick={e => setCar(car._id)}>\n            {car.name}\n            </li>\n        );\n    });\n  };\n\n  return (\n    <>\n      <ul id=\"carList\">{displayCars()}</ul>\n      {Id !== 0 &&\n        <CarDetails carId={Id}></CarDetails>\n      }\n    </>\n  );\n};\n\nexport default CarList;\n","import React from \"react\";\n\nconst HandleFormHook = callback => {\n  const [inputs, setInputs] = React.useState({});\n\n  const handleSubmit = event => {\n    if (event) {\n      event.preventDefault();\n    }\n    callback();\n  };\n  const handleInputChange = event => {\n    event.persist();\n    setInputs(inputs => ({\n      ...inputs,\n      [event.target.name]: event.target.value\n    }));\n  };\n  return {\n    handleSubmit,\n    handleInputChange,\n    inputs\n  };\n};\n\nexport default HandleFormHook;\n","import React from \"react\";\nimport {\n  getOwnersQuery,\n  AddCarMutation,\n  getCarsQuery\n} from \"./../queries/queries\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { useMutation } from '@apollo/react-hooks';\nimport HandleFormHook from \"./../hooks/handleFormHook\";\n\nconst AddCar = props => {\n    const { loading, data: owners } = useQuery(getOwnersQuery);\n    const [addCar, { data }] = useMutation(AddCarMutation);\n    \n    \n    const getFormData = () => {\n        addCar({\n            variables: {\n        name: inputs.carName,\n        model: parseInt(inputs.model),\n        company: inputs.company,\n        ownerId: inputs.owner\n    },\n    refetchQueries: [{ query: getCarsQuery }]\n});\n};\n\nconst { inputs, handleInputChange, handleSubmit } = HandleFormHook(\n  getFormData\n);\n\n  const getOwners = () => {\n    if (loading) {\n      return <option disabled>Owner loading...</option>;\n    } else {\n      return owners.owners.map(owner => {\n        return (\n          <option key={owner._id} value={owner._id}>\n            {owner.name}\n          </option>\n        );\n      });\n    } //esle ends here\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label>Car Name</label>\n          <input\n            type=\"text\"\n            name=\"carName\"\n            onChange={handleInputChange}\n            value={inputs.carName}\n          ></input>\n        </div>\n        <div className=\"field\">\n          <label>Model</label>\n          <input\n            type=\"number\"\n            name=\"model\"\n            onChange={handleInputChange}\n            value={inputs.model}\n          ></input>\n        </div>\n        <div className=\"field\">\n          <label>Company:</label>\n          <input\n            type=\"text\"\n            name=\"company\"\n            onChange={handleInputChange}\n            value={inputs.company}\n          ></input>\n        </div>\n        <div className=\"field\">\n          <label>Owner:</label>\n          <select\n            name=\"owner\"\n            onChange={handleInputChange}\n            value={inputs.owner}\n          >\n            <option>Select Owner</option>\n            {getOwners(props)}\n          </select>\n        </div>\n        <button>AddCar</button>\n      </form>\n    </>\n  );\n};\n\nexport default AddCar;\n","import React from \"react\";\nimport ApolloClient from \"apollo-boost\"; //connect with our server which is running at backend\nimport { ApolloProvider } from '@apollo/react-hooks'; // Connect react with apollo.\nimport CarList from \"./components/CarList\";\nimport AddCar from \"./components/AddCar\";\n\n//Using ApolloClient to connect with server\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\"\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <h1>List of Cars</h1>\n        <CarList />\n        <AddCar />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}